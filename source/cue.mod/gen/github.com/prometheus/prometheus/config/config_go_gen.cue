// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/prometheus/prometheus/config

package config

import (
	"github.com/prometheus/common/model"
	"github.com/prometheus/common/config"
)

// Config is the top-level configuration for Prometheus's config files.
#Config: _
\
// AlertmanagerConfigs is a slice of *AlertmanagerConfig.
#AlertmanagerConfigs: [...null | #AlertmanagerConfig]

// AlertmanagerAPIVersion represents a version of the
// github.com/prometheus/alertmanager/api, e.g. 'v1' or 'v2'.
#AlertmanagerAPIVersion: _ // #enumAlertmanagerAPIVersion

#enumAlertmanagerAPIVersion:
	#AlertmanagerAPIVersionV1 |
	#AlertmanagerAPIVersionV2

// AlertmanagerAPIVersionV1 represents
// github.com/prometheus/alertmanager/api/v1.
#AlertmanagerAPIVersionV1: #AlertmanagerAPIVersion & "v1"

// AlertmanagerAPIVersionV2 represents
// github.com/prometheus/alertmanager/api/v2.
#AlertmanagerAPIVersionV2: #AlertmanagerAPIVersion & "v2"

// AlertmanagerConfig configures how Alertmanagers can be discovered and communicated with.
#AlertmanagerConfig: _

// RemoteWriteConfig is the configuration for writing to remote storage.
#RemoteWriteConfig: _

// QueueConfig is the configuration for the queue used to write to remote
// storage.
#QueueConfig: {
	// Number of samples to buffer per shard before we block. Defaults to
	// MaxSamplesPerSend.
	capacity?: int @go(Capacity)

	// Max number of shards, i.e. amount of concurrency.
	max_shards?: int @go(MaxShards)

	// Min number of shards, i.e. amount of concurrency.
	min_shards?: int @go(MinShards)

	// Maximum number of samples per send.
	max_samples_per_send?: int @go(MaxSamplesPerSend)

	// Maximum time sample will wait in buffer.
	batch_send_deadline?: model.#Duration @go(BatchSendDeadline)

	// On recoverable errors, backoff exponentially.
	min_backoff?:       model.#Duration @go(MinBackoff)
	max_backoff?:       model.#Duration @go(MaxBackoff)
	retry_on_http_429?: bool            @go(RetryOnRateLimit)
}

// MetadataConfig is the configuration for sending metadata to remote
// storage.
#MetadataConfig: {
	// Send controls whether we send metric metadata to remote storage.
	send: bool @go(Send)

	// SendInterval controls how frequently we send metric metadata.
	send_interval: model.#Duration @go(SendInterval)
}

// SigV4Config is the configuration for signing remote write requests with
// AWS's SigV4 verification process. Empty values will be retrieved using the
// AWS default credentials chain.
#SigV4Config: {
	region?:     string         @go(Region)
	access_key?: string         @go(AccessKey)
	secret_key?: config.#Secret @go(SecretKey)
	profile?:    string         @go(Profile)
	role_arn?:   string         @go(RoleARN)
}

// RemoteReadConfig is the configuration for reading from remote storage.
#RemoteReadConfig: _
